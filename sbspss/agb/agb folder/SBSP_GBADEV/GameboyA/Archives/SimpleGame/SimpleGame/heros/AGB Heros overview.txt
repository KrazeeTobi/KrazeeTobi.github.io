Overview:
Having chose to mimic an existing game, many design issues had already been done for 
me.  My job was to get it all to fit.  The overall goal was to have an overworld map and 
fully functional battle screen.  All code is in Thumb Mode because I really didn't have a 
need for Arm Mode.  Please keep in mind that I chose the simplest method in order to get 
things working.  I wasn't concerned with ROM size, data optimization and in some areas 
performance.  I treated this more as a tutorial to familiarize myself with the AGB.

Instructions:
The demo starts off with your character placed on the map.  Use the controller to move 
the character around.  To enter the Battle Scene, press `START'.  Once the Battle Scene 
appears, you are able to control the characters on the left side.  A cursor is used to give 
units orders.  Use the control pad to move the cursor around and notice that the cursor 
changes depending on where/who you target.  Depending on the current unit, you can 
order it to defend, move, attack, or shoot.  Units can only move a short distance.  To 
move a unit, place the cursor near the selected unit.  When the cursor changes to the walk 
icon, press the `A' button to walk.  If the walk icon doesn't appear, move the cursor 
closer to the unit until it does.  Attacking works almost the same, simply place the cursor 
over the target.  Depending on the distance and unit type, the cursor will change to a 
sword, arrow or broken arrow.  To execute the attack, press the `A' button.  To defend (or 
skip that unit's turn) press the `B' button.  To exit the Battle Screen and go back to the 
map, press `START'.

Overworld Map:
The map is currently displayed in Bitmap Mode due to the size of the map I wanted to 
use.  Scrolling is achieved by indexing into the image and DMA'ing strips into the 
framebuffer.  This is extremely costly in terms of the CPU time required each frame, but 
was the easiest given my art format.  In the real world, the map would most likely be tiled 
and only the screen data would require updating.  Given the AGB's screen dimensions, I 
ran into several problems trying to duplicate this screen.  The status information and 
character panels obscured too much of the map and had to be changed.  Instead of 
constantly being displayed, they scroll in and out.  Another problem that needs to be 
addressed is character movement and scrolling.  I need to work out a better solution to 
keep as much of the map as possible around the character when scrolling.

Battle Scene:
The battle scene consists of the background, 14 battle units, 2 hero icons, a projectile, and 
cursor.  Since I felt I needed as much object VRAM as possible for my objects, I'm 
displaying the background in Character Mode using 256 colors.  The rest of the screen is 
comprised of objects, which I've detailed below.

Object Palettes:
Currently all objects are 16 colors.  This was decided mainly to allow each unit it's own 
palette and to conserve VRAM.  There are 14 unique units of which seven are complete.  
Currently each unit is allocated it's own palette slot.  It is possible that when all the units 
are compete, there won't be enough palette slots. I'll have a better picture as to how many 
palettes will be required once all the units are complete.

I considered using a 256-color palette, but decided to wait until the units were complete.  
With the artwork constantly changing, managing a global 256-color palette seemed 
troublesome especially when it can easily be changed later.  I was also concerned with 
not having enough VRAM to use 256 colors.
	
Objects:
In order to keep things simple I'm using a fixed VRAM memory map for the objects.  
Since 14 units have to be displayed, each unit was assigned slot large enough to contain 
the largest unit.  Two more slots were allocated for the hero icons, one for a projectile 
and one for the cursors.  Since the AGB doesn't support DMA transfers of rectangular 
regions, I'm using the one-dimensional character map mode to simplify DMA transfers 
and data management for the units.  Units are animated simply by DMA'ing the new 
frame in it's slot.  The VRAM map ended up as follows:

	$3800 bytes for 14 units 	64x32x16
	$0200 bytes for 2 hero icons 	16x32x16
	$0200 bytes for 1 projectile 	32x32x16
	$0400 bytes for 8 cursors	16x16x16
	
This totals out to $4000 (16384) bytes, half of our total of 32k.  This seems to have 
worked out rather well; I have exactly enough VRAM left if I decide to go to 256 colors!


