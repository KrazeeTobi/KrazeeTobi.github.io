AGB Multi-play Boot Library Manual


  **What is Multi-play Boot?
  **Multi-play Boot
    *Multi-play Boot Library
    *When the Game Pak is inserted in slaves
    *Slave with Game Pak accessing the Game Pak
    *Changes for programs to be downloaded (Transfer speed)
    *Changes for programs to be downloaded (Execution speed)
    *Cautions (Transfer fails once in a while)


**What is Multi-play Boot?
--------------------------

This is a feature that enables AGB not inserted with a Game Pak to boot and 
execute the program which is downloaded from external source.

The downloaded buffer is "CPU External Work" which is installed in AGB.  
It can download the maximum of 2M bits (256K bytes) of programs.

The program is downloaded from AGB inserted with a Game Pak by connecting AGB 
communication cable to 6-pin serial board.

When multi-play is played, it allows the players who do not have the Game Pak 
to participate in the game play.

However, when compared with the Game Pak, the capacity used to keep program and 
character data is small.  This causes lower quality and allows less time to 
download game data.


**Multi-play Boot
-----------------

One master and maximum of three slaves are connected by the AGB multi-play 
communication cable.

Game Pak is inserted in the master and slaves are either without Game Pak or 
inserted with the same Game Pak as the master.

The master automatically recognizes the connected slaves by the multi-play boot
library. By starting instruction, which is done with the button control on the 
master, download the program to the slaves without executing the Game Pak.  

For the slaves inserted with the same Game Pak as with the master, 
conduct download wait control to set in the download mode.

If the slave is not set in the download mode, the slaves inserted with Game Pak 
boot with the Game Pak program. This prevents them from downloading the program 
from the master.

By the value returned from boot library, the master determines whether or not the 
slaves without Game Paks or the slaves with Game Paks (which are in the download
mode) have successfully booted by downloading data from the master.

When all the slaves do not end communication normally, i.e., when even one of the
slaves is determined to have communication error, all the slaves fail in booting.

The Multi-play communication game can be executed among the maximum of 4 AGB.


*Multi-play Boot Library
------------------------

Link multi-play boot library and the program which you want to download to slaves
to the program on master. The recognition process "MultiBoot.c" in Multi-play Boot
is a process example. You may change the process in the way you like.

The program on slave can be created as the program in ROM. 
Differences are as follows:

  1. It is necessary to initialize the mode of the serial device at the time of 
     boot prior to using it because it depends on the booted mode. 
  2. Use rt0_multi_boot.s, instead of crt0.s.
  3. Set the start address of text section as 0x02000000. (It is 0x08000000 with ROM)

The bss section starts at 0x03000000 in the enclosed sample program.  
If any, it is acceptable to use the extra space in CPU external work RAM area
that is secured in the text section. (For example, from 0x02030000)

Set the program on the slave as binary and link to the program on the master.

When the master calls the boot library, secure multi-play boot parameter structure
in addition to 

  #include "MultiBoot.h".

The example would be 

  MultiBootParam multiboot_status;

Then, set up the member masterp of the structure.

  multiboot_status.masterp = demo_bin_start;

Afterwards, call an initializing function MultiBootInit().
Be sure to set up member masterp in advance as in the example above.

Once initialized, call every frame MultiBootMain().
When the structure member probe_count is 0 but client_bit is not 0,
call function MultiBootStartMaster() and start downloading the data to the slave.

Continue to call MultiBootMain() even after MultiBootStartMaster().
Normally, system call MultiBoot() is called within several calls of MultiBootMain(),
and the main process of downloading is executed.

When the function MultiBootCheckComplete() returns a value other than 0, 
download ended success. All the slaves that have been recognized should be booted.

Basically, a download can be started automatically, however, the button control on 
the master is recommended when the multi-play boot does not recognize the 3 slaves 
(since it is not known how many more would be connected).


*When the Game Pak is inserted in slaves
----------------------------------------

By pressing SELECT Button and START Button simultaneously when booting, the slave 
with Game Pak inserted cancels the boot from Game Pak and goes in the download 
wait status (download mode) to download data from the master.

Once it is in the download wait status, the master treats it same as the slaves 
without the Game Pak, and recognition and download process is done properly.

Before the download has started, you can cancel the download wait status by 
pressing A, B Buttons or Control Pad, and it boots program from Game Pak.


*Slave with Game Pak accessing the Game Pak
-------------------------------------------

You can read and write an area including the registration area in ROM and 
the backup data area of the Game Pak from the program executed in the slave 
with the Game Pak. Unless it is necessary, do not access the Game Pak.

In this section, we are going to talk about what to pay attention to when the 
slave accesses the Game Pak.

First of all, the registration area in ROM must be checked, and if a Game Pak is
different from the one inserted in master, indicate it on the screen and cancel 
the execution of the program. (However, since the enclosed sample program does 
not access the Game Pak, this process is omitted.)

It is possible that the master and the slaves have Game Paks with the same game 
title and the company code, but with different versions. In order to avoid such
a situation, be sure to unify the format of backup data among all the versions.

When ROM area other than the registration area in ROM is referred, unify the 
contents among all the versions.

For example, when the master has an older version of the Game Pak and the slave
has a newer version, the slave accesses the backup data area and ROM area with 
the program downloaded from the master.

If the forms of backup data are not compatible, they could destroy data or 
cause problems.

Contact the NOA Developer Support (support@noa.com) if it is necessary to 
access a Game Pak that is different from the one inserted in the master 
(for example, different color versions of Pokemon).


*Changes for the program to be downloaded (Transfer speed)
----------------------------------------------------------

It takes time to download.  The more slaves that are connected, the slower the 
transfer speed.  When 3 slaves are connected, the transfer speed is about 2.5K
bytes/second.

To reduce the download time, the enclosed sample program has downloaded 
"Expansion program and compressed data (original program + character)". Please 
see it as a reference.

After the boot has completed, it expands compressed data to the extra area in the 
CPU external work RAM (from 0x02010000) and executes the original program.

Rather than downloading all the programs and character data in the beginning, 
it is recommended that the download be executed in a manner that users do not 
feel like they have to wait too long until download completes.


*Changes for the program to be downloaded (Execution speed)
----------------------------------------------------------

The downloaded program is executed on the CPU external work RAM by default.  
The CPU prefetch function for the program code does not operate on RAM, and the
execution speed slows down since the CPU external work RAM is 2 wait access.

Execution speed improves when the interrupt process and frequently repeated loop 
are changed to be executed on the CPU internal work RAM. 


*Cautions (Transfer fails once in a while)
------------------------------------------

Currently (with TS2 target board), the transfer fails once in a while.
Although it has been noted that "Transfer is more likely to fail if the process
in V-Blank interrupts routine increases", the cause is still unknown and is under
investigation.

We would appreciate if you could contact us when you see either a "transfer 
definitely fails" error or a "transfer fails more than succeeds" under the 
condition. 

However, the multi-play boot does fail under the following conditions:

  1. DMA flag is turned on
     Stop DMA including direct sound.

  2. Transfer source data address and transfer size are incorrect
     For example, transfer source data address being 0x00000000 (System ROM) 
     causes an error.

  3. Communication cable is pulled off immediately after the master determines
     that the "boot completed successfully" with function MultiBootCheckComplete().

     The slave may fail to boot under this condition.
     It is normal for the slave to fail to boot since pulling out the cable itself
     is an abnormal operation. However, the master cannot comprehend the status in
     the current version of library.

     For the future versions, we are intending to improve the multi-play boot 
     library so that the slave can communicate with the master for the final 
     confirmation immediately after booted.


