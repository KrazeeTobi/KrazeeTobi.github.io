<html>

	<head>
		<link rel="stylesheet" type="text/css" href="style.css">
		<!--
Editors' comments:
mm/dd/yy  Created by * using w2w 2.0
mm/dd/yy Edited by * -->
		<title>AGB System Calls</title>
	</head>

	<body bgcolor="white">
		<h1>
		<h1><a name="T54"></a>17 AGB System Calls</h1>
		</h1>
		<p>Please refer to the AGB System Call Reference Manual for AGB system calls.</p>
		<h2>
		<h2><b><a name="T55"></a>17.1 System Call Operation</b></h2>
		</h2>
		<ul>
			<h3><b><a name="T56"></a>17.1.1 Normal Calls</b></h3>
			<ul>
				<p>1) When an argument is required for the system call used, after writing to registers R0-R3 call the monitor ROM system call with the &quot;SWI&lt;Number&gt;&quot;. The CPU mode changes to Supervisor Mode.</p>
			</ul>
		</ul>
		<ul>
			<ul>
				<p>2) Save the registers, SPSR_svc (formerly CPSR), R 11, R12, LR_svc (formerly PC) to the system call stack with the monitor ROM.</p>
			</ul>
		</ul>
		<center>
			<p><img src="Image134.gif" width="533" height="89"></p>
		</center>
		<ul>
			<ul>
				<p>3) Switch from CPU mode to system mode. Call the IRQ disable flag with monitor ROM. The previous status will continue.</p>
			</ul>
		</ul>
		<ul>
			<ul>
				<p>4) Save the R2 and LR_usr registers to the user stack. Other registers will be saved with each system call.</p>
			</ul>
		</ul>
		<center>
			<p><img src="Image135.gif" width="533" height="89"></p>
		</center>
		<ul>
			<ul>
				<p>5) Complete processing using each system call.</p>
			</ul>
		</ul>
		<center>
			<p><img src="Image136.gif" width="533" height="89"></p>
		</center>
		<ul>
			<ul>
				<p>6) Return value to registers R0, R1, and R3, in cases where a system call provides a return value, and then return to the user program.</p>
			</ul>
		</ul>
		<center>
			<p><img src="Image129.gif" width="533" height="89"></p>
		</center>
		<ul>
			<h3>
			<h3><b><a name="T57"></a>17.1.2 Multiple Calls</b></h3>
			</h3>
			<ul>
				<p>1) When an argument is required for the system call used, after reading to the registers, R0-R3, call the monitor ROM system call with the &quot;SWI&lt;Number&gt;&quot;.</p>
			</ul>
		</ul>
		<ul>
			<ul>
				<p>2) Save the registers, SPSR_svc (formerly CPSR), R12, LR_svc (formerly PC) to the system call stack with the monitor ROM.</p>
			</ul>
		</ul>
		<center>
			<p><img src="Image134.gif" width="533" height="89"></p>
		</center>
		<ul>
			<ul>
				<p>3) Switch from CPU mode to system mode. The status of the IRQ Disable Flag prior to the call is kept in System ROM. The previous conditions will be continued.</p>
			</ul>
		</ul>
		<ul>
			<ul>
				<p>4) Save the R2 and LR_usr registers to the user stack. Other registers will be saved with each system call.</p>
			</ul>
		</ul>
		<center>
			<p><img src="Image137.gif" width="533" height="89"></p>
		</center>
		<ul>
			<ul>
				<p>5) Interrupt occurs while executing system call.</p>
			</ul>
		</ul>
		<center>
			<p><img src="Image138.gif" width="533" height="89"></p>
		</center>
		<ul>
			<ul>
				<p>6) User interrupt processing is done. (You can reference the cause of the interrupt with the IF Register.) The CPU mode is changed to System Mode (User Mode with privilege) in order to solve the problem with stacks (to reference interrupt processing).</p>
			</ul>
		</ul>
		<center>
			<p><img src="Image139.gif" width="533" height="101"></p>
		</center>
		<ul>
			<ul>
				<p><img src="rightarrow.gif"><font size="3"> </font>If System Call occurs during User interrupt processing, the System Call is called using Multiple Calls.</p>
				<p>7) Monitor ROM does the system call operation (1), and loads to the system call stack.</p>
			</ul>
		</ul>
		<center>
			<p><img src="Image140.gif" width="533" height="106"></p>
		</center>
		<ul>
			<ul>
				<p>8) Switch the CPU Mode to System Mode (privileged user mode).</p>
			</ul>
		</ul>
		<ul>
			<ul>
				<p>9) Monitor ROM does the same operation as (3), and loads to the user stack.</p>
			</ul>
		</ul>
		<center>
			<p><img src="Image141.gif" width="533" height="148"></p>
		</center>
		<ul>
			<ul>
				<p>10) Complete processing with each system call.</p>
			</ul>
		</ul>
		<center>
			<p><img src="Image142.gif" width="533" height="105"></p>
		</center>
		<ul>
			<ul>
				<p>11) Return value to registers R0, R1, and R3, in cases where a system call provides a return value, and then return to the user interrupt processing.</p>
			</ul>
		</ul>
		<center>
			<p><img src="Image143.gif" width="533" height="105"></p>
		</center>
		<ul>
			<ul>
				<p>12) Complete the user interrupt processing and return to the previous system call.</p>
			</ul>
		</ul>
		<center>
			<p><img src="Image144.gif" width="533" height="89"></p>
		</center>
		<ul>
			<ul>
				<p>13) Complete processing with each system call.</p>
			</ul>
		</ul>
		<center>
			<p><img src="Image136.gif" width="533" height="89"></p>
		</center>
		<ul>
			<ul>
				<p>14) Return value to registers R0, R1, and R3, in cases where a system call provides a return value, and then return to the user program.</p>
			</ul>
		</ul>
		<center>
			<p><img src="Image129.gif" width="533" height="89"></center>
	</body>

</html>
