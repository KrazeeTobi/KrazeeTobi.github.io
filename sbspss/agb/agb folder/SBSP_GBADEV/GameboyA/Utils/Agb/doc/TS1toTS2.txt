How to upgrade AGB-CPU-TS1 --> AGB-CPU-TS2
(Example: simple)


** Switch agb/include with agb/lib.


** Include rom_header.s at the beginning of crt0.s and add ROM registration data.

crt0.s

_start:
    .INCLUDE    "rom_header.s"


** Move stack pointer after 3000000h.
   (Default value is set at the time of start up.)
** USR_BUF**/SYS_BUF** macros have been deleted. Change to the offset from macros 
   such as WRAM_END.  

AgbMemoryMap.s

EX_WRAM                 =   0x02000000          @ CPU external Working RAM 
EX_WRAM_END             =   (EX_WRAM + 0x40000)
CPU_WRAM                =   0x03000000          @ CPU internal Working RAM 
CPU_WRAM_END            =   (CPU_WRAM + 0x8000)
WRAM                    =    EX_WRAM            @ All of Working RAM  
WRAM_END                =    CPU_WRAM_END

crt0.s

sp_usr: .word   WRAM_END - 0x100
sp_irq: .word   WRAM_END - 0x60


** Set interrupt address to 3007FFCh (or 3FFFFFCh).

AgbMemoryMap.s

INTR_VECTOR_BUF         =   (CPU_WRAM_END - 0x4)@ Interrupt branch address 

AgbMemoryMap.h

#define INTR_VECTOR_BUF         (CPU_WRAM_END - 0x4)// Interrupt branch address 
crt0.s

        ldr     r1, =INTR_VECTOR_BUF    @ Set interrupt address 
        adr     r0, intr_main
        str     r0, [r1]

main.c

    *(vu32 *)INTR_VECTOR_BUF = (vu32 )IntrMainBuf;


** Set buffer address for sound driver to 3007FF0h (or 3FFFFF0h).

AgbMemoryMap.h

#define SOUND_AREA_ADDR_BUF     (CPU_WRAM_END - 0x10)//Sound driver working 
							address  


** When interrupting, set "1" to the newly created IME register (4000208h).

main.c

    *(vu16 *)REG_IME   = 1;                           // Set IME  


** Note changes of bit composition of DMA control register. 

AgbDefine.h

#define DMA_SRC_INC             0x00000000  // select source increment 
#define DMA_SRC_DEC             0x00800000  // select source decrement 
#define DMA_SRC_FIX             0x01000000  // select source fix 
#define DMA_DEST_INC            0x00000000  // select destination increment 
#define DMA_DEST_DEC            0x00200000  // select destination decrement 
#define DMA_DEST_FIX            0x00400000  // select destination fix  
#define DMA_DEST_RELOAD         0x00600000  // select destination increment/reload 

** When clearing CPU internal Working RAM and CPU external Working RAM by DMA,  
   please do so separately since there is a counter limitation.  

main.c

    DmaClear(3, 0, EX_WRAM,  EX_WRAM_SIZE,          32);   // clear CPU external 
								Work RAM  
    DmaClear(3, 0, CPU_WRAM, CPU_WRAM_SIZE - 0x200, 32);   // clear CPU internal 
								Work RAM  


** Change OBJ sizes that can be specified as shown below.  

AgbDefine.h

#define OAM_SHAPE_MASK          0x0000c000  // OBJ shape 
#define OAM_SIZE_MASK           0xc0000000  // OBJ size   

#define OAM_SHAPE_SHIFT         14
#define OAM_SIZE_SHIFT          30

#define OAM_SQUARE              0x00000000  // Square OBJ  
#define OAM_H_RECTANGLE         0x00004000  // Horizontal rectangle OBJ 
#define OAM_V_RECTANGLE         0x00008000  // Vertical rectangle OBJ  
#define OAM_SIZE_NO_0           0x00000000  // OBJ size No 0 
#define OAM_SIZE_NO_1           0x40000000  // OBJ size No 1 
#define OAM_SIZE_NO_2           0x80000000  // OBJ size No 2 
#define OAM_SIZE_NO_3           0xc0000000  // OBJ size No 3  
#define OAM_SIZE_8x8            0x00000000  // OBJ 8 x 8 dot 
#define OAM_SIZE_16x16          0x40000000  // OBJ 16 x 16 dot   
#define OAM_SIZE_32x32          0x80000000  // OBJ 32 x 32 dot  
#define OAM_SIZE_64x64          0xc0000000  // OBJ 64 x 64 dot   
#define OAM_SIZE_16x8           0x00004000  // OBJ 16 x 8 dot 
#define OAM_SIZE_32x8           0x40004000  // OBJ 32 x 8 dot  
#define OAM_SIZE_32x16          0x80004000  // OBJ 32 x 16 dot  
#define OAM_SIZE_64x32          0xc0004000  // OBJ 64 x 32 dot  
#define OAM_SIZE_8x16           0x00008000  // OBJ 8 x 16 dot  
#define OAM_SIZE_8x32           0x40008000  // OBJ 8 x 32 dot  
#define OAM_SIZE_16x32          0x80008000  // OBJ 16 x 32 dot  
#define OAM_SIZE_32x64          0xc0008000  // OBJ 32 x 64 dot   

data.c

const u32 OamData_Sample[1][2] = {
            { OAM_COLOR_16 | OAM_SQUARE | OAM_SIZE_8x8
            | 8*4 << OAM_H_POS_SHIFT
            | 8*4 << OAM_V_POS_SHIFT,
             (1<<12)+0x80},
        };


