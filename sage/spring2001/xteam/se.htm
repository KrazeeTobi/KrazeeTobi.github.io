<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=windows-1252">
<META NAME="Generator" CONTENT="Microsoft Word 97">
<TITLE>There are actually three levels of programmers</TITLE>
</HEAD>
<BODY>

<FONT SIZE=2><P>Software Engineer 101</P>
<P>Andrew Wolan</P>

<P>There are actually three levels of &quot;coders&quot;</P>

<P>1) Script Kiddys</P>
<P>2) a) Scripters   b) Programmers</P>
<P>3) Software Engineer</P>

<P>1) Script Kiddy</P>

<P>This term is taken from the computer security field. A script kiddy is someone who grabs a program's source code off the net and runs it with very little to no understand as to the mechanics behind the program. A script kiddy does not know how to make any real modifications to the program, except for maybe changing the text in a "print" statements. In short, a script kiddy relies on someone else to do their work.</P>

<P>2) Script</P>
<P>Code that is  used to control the behavior of another (usually running) program. Ex: Javascript allows one to redefine how objects in a web browser are controlled. Scripts tend to run onto of a running program.</P>

<P>Scripter – One who writes scripts.</P>

<P>Programmer</P>
<P>A programmer is one who can take a concept and turn it into reality on the computer. A programmer is someone who can express what need to be done in the form of a computer language. A programmer is capable of interpreting what other have expressed in the form of a program and make modifications to it if needed.</P>

<P>A scripter, for all practicality, is a programmer. The differences are subtle. If you want a good script written, you will need a good programmer to write it. </P>

<P>3) Software Engineer </P>
<P>A SW is someone who is experienced in writing programs from start to finish, can collaborate with teams to speed development, knows how to make trade-offs to keep costs and development time down while retaining quality and speed in the product. A software engineer can lead a project from the planning stage, to the design stage, to the implementing stage and the testing stage. (The test stage is constant and occurs through-out the life of the project.) A software engineer will use a programming language based on the goals of the project, not what they are necessarily most comfortable with.  </P>

<P>Finally, for a software engineer to be accredited by any industry, the individual needs to hold a bachelor of science degree in a computer related field. (Computer science.)</P>

<P>Bottom Line</P>

<P>A friend of a SE is code reuse. In short, grabbing off the shelf modules that have been prewritten and pretested and modifying them for your own needs. (If needed.) It also means writing one’s program in modules so parts of it can be used later on.</P>

<P>However, the bottom line on any project is pride. If you make a program where all the components used were premade for you and all you did was define a few parameters and some code to control them, how unique will your program be from someone else using the same tools as you? Will you even be able to express your creativity? </P>

<P>That is why code reuse is frown upon by some, and that is what the current situation is all about: the level of real pride in one’s work. But there should be no need to frown if the tool used did not limit your creativity to begin with.</P>

<P>Ex: houses are made with standard sized boards of woods, windows of certain dimensions, doors of a certain size, wiring of certain gages, etc. Though the components might be the same, we are still able to build houses of various design limited by your creativity. Sure, we can build a house from custom parts, but it will be far more expensive.  (Leon Osterweil)</P>

<P>I personally think that C&amp;C can be a very valuable programming tool if one is allowed to not only edit the premade modules, but to incorporate code written in other languages, like C++ or assembly into a C&amp;C project. (The later is useful for speed-up parts of the program that would benefit from a speed boast. A known SE fact is that a program will speed 90% of it’s time executing on 10% of it’s code.) If I’m not mistaken, Visual Basic has these features.</P>

<P>However, from a software engineering standpoint, writing an entire program from scratch in C/C++ is foolish. Though C++ code is fast, it is also harder to debug, and it can take longer to code. The ideal solution would be to write the program in an easier to control language, like Java or Visual Basic, and write the core parts of the program, like the engine, in C/C++. Doing so will speed development on the parts of the program that don’t need a speed boast while allowing the programmer to focus efforts on the parts of the program that need to be fast, like the game engine, the graphics handlers, the processing of sound, etc. How all these modules interact and other details that don’t need a speed boast should be written in another language that is easy to debug. </P>

<P>In the industry, you only have so much time to get your product out. Cutting whatever corners you can to ensure a quick turnaround time without sacrificing quality is just good economics and good common sense. If the game is fast, fun and just plan cool, no one is going to care what was used to programming it. A program could be written in assembly, but if it’s not fun, the time spend on it was meaningless.</P>

<P>&nbsp;</P>
<P>The moral: work smarter, not harder.</P></FONT></BODY>
</HTML>
